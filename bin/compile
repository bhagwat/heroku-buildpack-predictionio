#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

# source in common functions
. $BIN_DIR/common.sh

echo "BUILD_DIR: $BUILD_DIR"|indent
echo "CACHE_DIR: $CACHE_DIR"|indent

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

PREDICTIONIO_DIR="PredictionIO"
PREDICTIONIO_VERSION="0.9.4"

install_predictionio()
{
  VER_TO_INSTALL=$1
  PREDICTIONIO_URL="https://d8k1yxp8elc6b.cloudfront.net/PredictionIO-$VER_TO_INSTALL.tar.gz"

  PREDICTIONIO_TAR_FILE="PredictionIO.tar.gz"
  echo "-----> Installing PredictionIO $VER_TO_INSTALL....."
  curl --silent --max-time 150 --location $PREDICTIONIO_URL -o $PREDICTIONIO_TAR_FILE

  # Error checking
  if [ ! -f $PREDICTIONIO_TAR_FILE ]; then
    echo "-----> Error downloading PredictionIO. Please try again..."
    exit 1
  fi
  if [ -z "`file $PREDICTIONIO_TAR_FILE | grep gzip`" ]; then
    echo "-----> Error installing PredictionIO or unsupported PredictionIO version specified. Please visit https://docs.prediction.io/install/install-linux for installation guide and supported version"
    exit 1
  fi

  #extract tar file
  tar zxvf $PREDICTIONIO_TAR_FILE
  rm $PREDICTIONIO_TAR_FILE
  #copy to standard dir location
  mv PredictionIO-$VER_TO_INSTALL $PREDICTIONIO_DIR
  #make predictionio commands executable
  chmod +x $PREDICTIONIO_DIR/bin/*

  echo "-----> Done installing PredictionIO"

  install_spark
}

install_spark()
{
  SPARK_URL="http://d3kbcqa49mib13.cloudfront.net/spark-1.4.1-bin-hadoop2.6.tgz"

  SPARK_TAR_FILE="spark-1.4.1-bin-hadoop2.6.tgz"
  echo "-----> Installing Apache Spark....."
  curl --silent --max-time 150 --location $SPARK_URL -o $SPARK_TAR_FILE

  # Error checking
  if [ ! -f $SPARK_TAR_FILE ]; then
    echo "-----> Error downloading Apache spark. Please try again..."
    exit 1
  fi

  #Make sure vendors dir exists
  echo "-----> Creating dir: $PREDICTIONIO_DIR/vendors"
  mkdir -p $PREDICTIONIO_DIR/vendors

  #extract tgz file
  tar zxvfC $SPARK_TAR_FILE $PREDICTIONIO_DIR/vendors
  rm $SPARK_TAR_FILE

  echo "-----> Done installing Apache Spark"
  configure_persistence
}

configure_persistence()
{
PIO_CONFIG_FILE_PATH="$PREDICTIONIO_DIR/conf/pio-env.sh"
echo "Configuring database >>>>>> Before"
cat $PIO_CONFIG_FILE_PATH
echo  ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
sed -i "s|jdbc:postgresql://localhost/pio|$PIO_STORAGE_SOURCES_PGSQL_URL|" $PIO_CONFIG_FILE_PATH
sed -i "s|PIO_STORAGE_SOURCES_PGSQL_USERNAME=pio|PIO_STORAGE_SOURCES_PGSQL_USERNAME=$PIO_STORAGE_SOURCES_PGSQL_USERNAME|" $PIO_CONFIG_FILE_PATH
sed -i "s|PIO_STORAGE_SOURCES_PGSQL_PASSWORD=pio|PIO_STORAGE_SOURCES_PGSQL_PASSWORD=$PIO_STORAGE_SOURCES_PGSQL_PASSWORD|" $PIO_CONFIG_FILE_PATH
echo  "After>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
cat $PIO_CONFIG_FILE_PATH
echo "-----> Done configuring PG database"
}

if [ ! -f $BUILD_DIR/engine.json ] ; then
    echo "-----> File not found: engine.json. This file is required. Build failed."
    echo " !     Failed to build app" | indent
    exit 1
fi
    
echo "-----> PredictionIO recommendation engine app detected"
echo "       WARNING: The PredictionIO buildpack is currently in Beta." |indent

# create default system.properties
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.8" > ${BUILD_DIR}/system.properties
fi

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"|indent

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

cd $CACHE_DIR

# install predictionio
if [ ! -d $PREDICTIONIO_DIR ]; then
    install_predictionio $PREDICTIONIO_VERSION
fi

#copy cached PIO tools to BUILD_DIR
echo -n "-----> Copying PredictionIO executables to $BUILD_DIR dir..."
cp -r $CACHE_DIR/$PREDICTIONIO_DIR $BUILD_DIR/

#Bypass cache and install the predictionIO binaries in build dir directly
cd $BUILD_DIR

# JAVA_HOME is exported in install_java
export PREDICTIONIO_HOME=$CACHE_DIR/$PREDICTIONIO_DIR
export PATH=$PREDICTIONIO_HOME/bin:$PATH


PROFILE_PATH="$BUILD_DIR/.profile.d/predictionio.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export POI_HOME="$HOME/$PREDICTIONIO_DIR"' >> $PROFILE_PATH
echo 'export PATH="$HOME/.jdk/bin:$PATH"' >> $PROFILE_PATH
echo 'export PATH="$POI_HOME/bin:$PATH"' >> $PROFILE_PATH